<!DOCTYPE html>
<html>
  <head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
    Stylesheets and Preprocessors
    ==============================

    You can always bring in CSS files manually with `<link>` tags, or asynchronously
    using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
    of Sails' conventional asset pipeline (boilerplate Gruntfile).

    By default, stylesheets from your `assets/styles` folder are included
    here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
    are supported. In production, your styles will be minified and concatenated into
    a single file.
    
    To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:
    
    + Change the order of your CSS files
    + Import stylesheets from other directories
    + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/main.css">
    <!--STYLES END-->
    <%if(_csrf){%>
      <script>
      window.cdp = {
	      csrf: "<%=_csrf%>" 
      }
      </script>
    <%}%>
    <script>
    // Picture element HTML5 shiv
    document.createElement( "picture" );
    </script>
    <script src="/js/picturefill.min.js" async></script>
    
  </head>

  <body>
    
    <% if(session.User || true){ %>
      <div class="background">
      <input type="checkbox" id="sandwich-menu" unchecked>
      
      <ul class="admin-nav nudedList">
	<% if(false && session.User.admin){%>
	  <li>
	    <a href="/user">Utilisateurs</a>
	  </li>
	<%}%>
	<li>
	  <a href="/blog/list">Blog</a>
	</li>
      </ul>
      <% if(session.authentificated){%>
	<div class="user-info">
	  <a href="/user/show/<%- session.User.id%>"><%= session.User.name %></a>
	  <a href="/session/destroy">Déconnection</a>
	</div>
      <%}%>
	<ul class="admin-option nudedList">
	  <%if(session.modelUse == 'blog'){%>
	  <li><a href="/blog/new">Créer un article</a></li>
	  <li><a href="/tag/">Liste des tags</a></li>
	  <li><a href="/tag/new">Créer un tag</a></li>
	  <%}%>
	</ul>
	<ul id="admin-shortcuts" class="nudedList inlineList">
	
	</ul>
	<div id="page">
      <% } %>
      
      <%- body %>

      <%if(session.authentificated){%>
	</div>
      </div>
	<%}%>

      <!--
      Client-side Templates
      ========================

      HTML templates are important prerequisites of modern, rich client applications.
      To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
      that you load these templates client-side.

      By default, your Gruntfile is configured to automatically load and precompile
      client-side JST templates in your `assets/templates` folder, then
      include them here automatically (between TEMPLATES and TEMPLATES END).
      
      To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

      + Import templates from other directories
      + Use a different template engine (handlebars, jade, dust, etc.)
      + Internationalize your client-side templates using a server-side
      stringfile before they're served.
      -->

      <!--TEMPLATES-->
      
      <!--TEMPLATES END-->


      <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
      
      + Change the order of your scripts
      + Import scripts from other directories
      + Use a different preprocessor, like TypeScript

      -->

      <!--SCRIPTS-->
      <script src="/js/dependencies/sails.io.js"></script>
      <script src="/js/dependencies/jquery.js"></script>
      <script src="/js/app.js"></script>
      <script src="/js/blog-shortcut.js"></script>
      <script src="/js/picturefill.min.js"></script>
      <!--SCRIPTS END-->
  </body>
</html>
